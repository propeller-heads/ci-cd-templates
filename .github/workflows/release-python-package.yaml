name: Release Python Package

on:
  workflow_call:
    inputs:
      package_root:
        description: "The root of the python project (containing pyproject.toml)"
        required: true
        type: string
      runs_on:
        required: false
        type: string
        default: ubuntu-latest
        description: Runner tag for workflow
      repository:
        description: 'Repository name'
        required: false
        default: "protosim"
        type: string
      domain:
        description: 'AWS CodeArtifact domain'
        required: false
        default: "propeller"
        type: string
      yum_packages:
        description: "Packages to install using YUM (docker linux builds)"
        required: false
        type: string
        default: "pkgconfig"
      brew_packages:
        description: "Packages to install using Homebrew (MacOS builds)"
        required: false
        type: string
        default: ""
      use_maturin:
        description: 'Whether to use maturin for building the wheel'
        required: false
        type: boolean
        default: false
      push:
        description: "Whether to push the package once it is built"
        required: false
        default: true
        type: boolean
      py_version:
        description: | 
          Which python version to use for the build (see supported versions here 
          https://github.com/pypa/manylinux).
        required: false
        default: "3.9"
        type: string
    secrets:
      app_id:
        required: true
      app_private_key:
        required: true
      role_to_assume:
        required: true
      aws_region:
        required: true
      domain_owner:
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_publish_package:
    runs-on: "${{ inputs.runs_on }}"
    steps:
      - name: Generate a token
        id: generate-token
        uses: getsentry/action-github-app-token@d4b5da6c5e37703f8c3b3e43abb5705b46e159cc
        with:
          app_id: ${{ secrets.app_id }}
          private_key: ${{ secrets.app_private_key }}

      - name: Install git on Linux
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt update && sudo apt install -y git

      - name: Install git on macOS
        if: ${{ runner.os == 'macOS' }}
        run: brew update && brew install git

      - name: Check out Repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
        with:
          role-to-assume: ${{ secrets.role_to_assume }}
          audience: sts.amazonaws.com
          aws-region: ${{ secrets.aws_region }}

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367
        if: ${{ runner.os != 'macOS' }}
        with:
          version: 2
          verbose: false
          arch: amd64
          rootdir: ""
          workdir: ""

      - name: Set up Python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38
        with:
          python-version: ${{ inputs.py_version }}

      - name: Install python package utils
        run: |
          python${{ inputs.py_version }} -m pip install --upgrade pip build twine

      - name: Write Dockerfile | Build wheel for Linux (with maturin)
        if: ${{ runner.os == 'Linux' && inputs.use_maturin }}
        run: |
          cat <<EOF > Dockerfile.wheel
          FROM quay.io/pypa/manylinux2014_x86_64
          
          RUN yum install -y ${{ inputs.yum_packages }} && yum clean all
          
          RUN curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain=stable -y
          
          ENV PATH="/root/.cargo/bin:/opt/rh/devtoolset-10/root/usr/bin:$PATH"
          
          RUN python${{ inputs.py_version }} -m pip install maturin
          
          WORKDIR /build
          CMD python${{ inputs.py_version }} -m maturin build --release --compatibility manylinux2014 -i $(realpath /usr/local/bin/python${{ inputs.py_version }})
          EOF
          
          cat Dockerfile.wheel

      - name: Build Docker Image | Build wheel for Linux (with maturin)
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        if: ${{ runner.os == 'Linux' && inputs.use_maturin }}
        with:
          context: .
          tags: linux-wheel-builder
          file: Dockerfile.wheel
          push: false

      - name: Build | Build wheel for Linux (with maturin)
        uses: addnab/docker-run-action@4f65fabd2431ebc8d299f8e5a018d79a769ae185
        if: ${{ runner.os == 'Linux' && inputs.use_maturin }}
        with:
          image: linux-wheel-builder
          options: -v ${{ github.workspace }}:/build
          run: |
            # allows resolving private git packages
            git config --global credential.helper store
            echo "https://${{ steps.generate-token.outputs.token }}@github.com" > ~/.git-credentials
            git config --global url."https://x-access-token:${{ steps.generate-token.outputs.token }}@github.com".insteadOf ssh://github.com
            
            cd ${{ inputs.package_root }}
            python${{ inputs.py_version }} -m maturin build --release --compatibility manylinux2014 -i $(realpath /usr/local/bin/python${{ inputs.py_version }})
      

      - name: Set up Homebrew | Build wheel for macOS (with maturin)
        if: ${{ runner.os == 'macOS' && inputs.use_maturin }}
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@266845213695c3047d210b2e8fbc42ecdaf45802

      - name: Setup Rust | Build wheel for macOS (with maturin)
        if: ${{ runner.os == 'macOS' && inputs.use_maturin }}
        uses: dtolnay/rust-toolchain@888c2e1ea69ab0d4330cbf0af1ecc7b68f368cc1
        with:
          toolchain: stable

      - name: Setup Rust Cache | Build wheel for macOS (with maturin)
        if: ${{ runner.os == 'macOS' && inputs.use_maturin }}
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
        with:
          cache-on-failure: true

      - name: Build | Build wheel for macOS (with maturin)
        if: ${{ runner.os == 'macOS' && inputs.use_maturin }}
        run: |
          if [ -n "${{ inputs.brew_packages }}" ]; then
            brew install ${{ inputs.brew_packages }}
          else
            echo "No packages to install."
          fi
          python${{ inputs.py_version }} -m pip install maturin
          
          git config --global credential.helper store
          echo "https://${{ steps.generate-token.outputs.token }}@github.com" > ~/.git-credentials
          git config --global url."https://x-access-token:${{ steps.generate-token.outputs.token }}@github.com".insteadOf ssh://github.com
          
          cd ${{ inputs.package_root }}
          python${{ inputs.py_version }} -m maturin build --release --interpreter $(which python${{ inputs.py_version }})

      - name: Build wheel without maturin
        if: ${{ !inputs.use_maturin }}
        run: |
          cd ${{ inputs.package_root }}
          python${{ inputs.py_version }} -m build

      - name: Publish Python distribution to AWS CodeArtifact
        if: ${{ inputs.push }}
        shell: bash
        run: |
          aws codeartifact login --tool twine --domain ${{ inputs.domain }} --domain-owner ${{ secrets.domain_owner }} --repository ${{ inputs.repository }}

          if [ "${{ inputs.use_maturin }}" = "true" ]; then
            twine upload --repository codeartifact ./target/wheels/*.whl
          else
            cd ${{ inputs.package_root }}
            twine upload --repository codeartifact ./dist/*.whl ./dist/*.tar.gz
          fi
